// Generated by CoffeeScript 1.6.3
(function() {
  var App, Glue, Gui, Server, UseCase, app,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _.defaults(this, {
    Before: function(object, methodName, adviseMethod) {
      return YouAreDaBomb(object, methodName).before(adviseMethod);
    },
    BeforeAnyCallback: function(object, methodName, adviseMethod) {
      return YouAreDaBomb(object, methodName).beforeAnyCallback(adviseMethod);
    },
    After: function(object, methodName, adviseMethod) {
      return YouAreDaBomb(object, methodName).after(adviseMethod);
    },
    Around: function(object, methodName, adviseMethod) {
      return YouAreDaBomb(object, methodName).around(adviseMethod);
    }
  });

  Server = (function() {
    function Server() {}

    Server.prototype.take_data = function() {
      var _this = this;
      console.log("dupa");
      return $.ajax({
        type: "GET",
        url: "http://0.0.0.0:3000/name_list.json",
        success: function(names) {
          console.log("success");
          console.log(names);
          return _this.data_taken(names);
        },
        error: function() {
          return console.log("fail");
        }
      });
    };

    Server.prototype.data_taken = function(data) {};

    return Server;

  })();

  UseCase = (function() {
    function UseCase() {
      this.writeNames = __bind(this.writeNames, this);
      this.names = ["Anette", "Henry", "Tarja", "Mia", "Callin", "Pauli"];
    }

    UseCase.prototype.start = function(server) {
      this.server = server;
      this.writeNames(this.names);
      return this.server.take_data();
    };

    UseCase.prototype.writeNames = function(names) {};

    return UseCase;

  })();

  Gui = (function() {
    function Gui() {
      this.showNames = __bind(this.showNames, this);
      this._createElementFor = __bind(this._createElementFor, this);
    }

    Gui.prototype._createElementFor = function(templateId, data) {
      var element, html, source, template;
      source = $(templateId).html();
      template = Handlebars.compile(source);
      html = template(data);
      return element = $(html);
    };

    Gui.prototype.showNames = function(names) {
      var element;
      element = this._createElementFor("#show-names-template", {
        names: names
      });
      return $(".main").append(element);
    };

    return Gui;

  })();

  Glue = (function() {
    function Glue(useCase, gui, server) {
      var _this = this;
      this.useCase = useCase;
      this.gui = gui;
      this.server = server;
      After(this.useCase, "writeNames", function(names) {
        return _this.gui.showNames(names);
      });
      After(this.server, "data_taken", function(data) {
        return gui.showNames(data);
      });
    }

    return Glue;

  })();

  App = (function() {
    function App() {
      var glue, gui, server, usecase;
      console.log("hello");
      usecase = new UseCase();
      gui = new Gui();
      server = new Server();
      glue = new Glue(usecase, gui, server);
      usecase.start(server);
    }

    return App;

  })();

  app = new App();

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
